{
  "version": 3,
  "sources": ["../src/cli.ts"],
  "sourcesContent": ["#!/usr/bin/env node\nimport { spawn } from 'child_process';\nimport { fileURLToPath } from 'url';\nimport { dirname, resolve, isAbsolute } from 'path';\nimport fs from 'fs';\n\nconst __filename = fileURLToPath(import.meta.url);\nconst __dirname = dirname(__filename);\n\nfunction printUsage() {\n\tconsole.error('Usage: npx simple-commands-mcp @<config-file>');\n\tconsole.error('');\n\tconsole.error('Example:');\n\tconsole.error('  npx simple-commands-mcp @config.json');\n\tconsole.error('  npx simple-commands-mcp @./my-tools.json');\n\tconsole.error('  npx simple-commands-mcp @/absolute/path/to/config.json');\n\tprocess.exit(1);\n}\n\nfunction main() {\n\tconst args = process.argv.slice(2);\n\t\n\tif (args.length === 0) {\n\t\tprintUsage();\n\t}\n\t\n\tconst configArg = args[0];\n\t\n\tif (!configArg.startsWith('@')) {\n\t\tconsole.error('Error: Config file must be prefixed with @ (e.g., @config.json)');\n\t\tprintUsage();\n\t}\n\t\n\tconst configPath = configArg.slice(1);\n\tconst resolvedConfigPath = isAbsolute(configPath) \n\t\t? configPath \n\t\t: resolve(process.cwd(), configPath);\n\t\n\tif (!fs.existsSync(resolvedConfigPath)) {\n\t\tconsole.error(`Error: Config file not found: ${resolvedConfigPath}`);\n\t\tprocess.exit(1);\n\t}\n\t\n\ttry {\n\t\tconst configContent = fs.readFileSync(resolvedConfigPath, 'utf-8');\n\t\tJSON.parse(configContent);\n\t} catch (error) {\n\t\tconsole.error(`Error: Invalid JSON in config file: ${resolvedConfigPath}`);\n\t\tconsole.error(error);\n\t\tprocess.exit(1);\n\t}\n\t\n\tconst serverPath = resolve(__dirname, 'server.js');\n\t\n\tconst env = {\n\t\t...process.env,\n\t\tMCP_CONFIG_PATH: resolvedConfigPath,\n\t\tMCP_PROJECT_ROOT: process.cwd()\n\t};\n\t\n\tconst child = spawn('node', [serverPath], {\n\t\tenv,\n\t\tstdio: 'inherit'\n\t});\n\t\n\tchild.on('error', (error) => {\n\t\tconsole.error('Failed to start MCP server:', error);\n\t\tprocess.exit(1);\n\t});\n\t\n\tchild.on('exit', (code) => {\n\t\tprocess.exit(code || 0);\n\t});\n\t\n\tprocess.on('SIGINT', () => {\n\t\tchild.kill('SIGINT');\n\t});\n\t\n\tprocess.on('SIGTERM', () => {\n\t\tchild.kill('SIGTERM');\n\t});\n}\n\nmain();"],
  "mappings": ";;;;AACA,SAAS,aAAa;AACtB,SAAS,qBAAqB;AAC9B,SAAS,SAAS,SAAS,kBAAkB;AAC7C,OAAO,QAAQ;AAEf,IAAM,aAAa,cAAc,YAAY,GAAG;AAChD,IAAM,YAAY,QAAQ,UAAU;AAEpC,SAAS,aAAa;AACrB,UAAQ,MAAM,+CAA+C;AAC7D,UAAQ,MAAM,EAAE;AAChB,UAAQ,MAAM,UAAU;AACxB,UAAQ,MAAM,wCAAwC;AACtD,UAAQ,MAAM,4CAA4C;AAC1D,UAAQ,MAAM,0DAA0D;AACxE,UAAQ,KAAK,CAAC;AACf;AAEA,SAAS,OAAO;AACf,QAAM,OAAO,QAAQ,KAAK,MAAM,CAAC;AAEjC,MAAI,KAAK,WAAW,GAAG;AACtB,eAAW;AAAA,EACZ;AAEA,QAAM,YAAY,KAAK,CAAC;AAExB,MAAI,CAAC,UAAU,WAAW,GAAG,GAAG;AAC/B,YAAQ,MAAM,iEAAiE;AAC/E,eAAW;AAAA,EACZ;AAEA,QAAM,aAAa,UAAU,MAAM,CAAC;AACpC,QAAM,qBAAqB,WAAW,UAAU,IAC7C,aACA,QAAQ,QAAQ,IAAI,GAAG,UAAU;AAEpC,MAAI,CAAC,GAAG,WAAW,kBAAkB,GAAG;AACvC,YAAQ,MAAM,iCAAiC,kBAAkB,EAAE;AACnE,YAAQ,KAAK,CAAC;AAAA,EACf;AAEA,MAAI;AACH,UAAM,gBAAgB,GAAG,aAAa,oBAAoB,OAAO;AACjE,SAAK,MAAM,aAAa;AAAA,EACzB,SAAS,OAAO;AACf,YAAQ,MAAM,uCAAuC,kBAAkB,EAAE;AACzE,YAAQ,MAAM,KAAK;AACnB,YAAQ,KAAK,CAAC;AAAA,EACf;AAEA,QAAM,aAAa,QAAQ,WAAW,WAAW;AAEjD,QAAM,MAAM;AAAA,IACX,GAAG,QAAQ;AAAA,IACX,iBAAiB;AAAA,IACjB,kBAAkB,QAAQ,IAAI;AAAA,EAC/B;AAEA,QAAM,QAAQ,MAAM,QAAQ,CAAC,UAAU,GAAG;AAAA,IACzC;AAAA,IACA,OAAO;AAAA,EACR,CAAC;AAED,QAAM,GAAG,SAAS,CAAC,UAAU;AAC5B,YAAQ,MAAM,+BAA+B,KAAK;AAClD,YAAQ,KAAK,CAAC;AAAA,EACf,CAAC;AAED,QAAM,GAAG,QAAQ,CAAC,SAAS;AAC1B,YAAQ,KAAK,QAAQ,CAAC;AAAA,EACvB,CAAC;AAED,UAAQ,GAAG,UAAU,MAAM;AAC1B,UAAM,KAAK,QAAQ;AAAA,EACpB,CAAC;AAED,UAAQ,GAAG,WAAW,MAAM;AAC3B,UAAM,KAAK,SAAS;AAAA,EACrB,CAAC;AACF;AAEA,KAAK;",
  "names": []
}
